#!/usr/bin/env bash

###############################################################################
# Fitzypop's Linux Install script
#
# First section:    Install various packages via apt, flatpak,
#                   and install scripts
#
# Second Section:   Create symlinks for dotfiles
#
# I'm currently using Pop!_OS and apt to install packages.
# This should be compatiable with any Ubuntu Based Distro,
# but I will be assuming Pop!_OS default setup.
#
###############################################################################

# "e" will make script exit if something fails
# "x" will print out every command and its result
# set -x #e

function printsl {
    echo "" # newline
    echo "$1"
    sleep 0.5
}


# Need these to install ppas and setup scripts
printsl "Installing prerequesites before installing PPAs."
sudo apt update
sudo apt install apt-transport-https curl software-properties-common

# Adding PPAs for fish, git, brave, and node

printsl "Adding Fish PPA for lastest version of fish shell."
add-apt-repository ppa:fish-shell/release-3

printsl "Adding Git Core PPA for latest stable upstream of Git."
add-apt-repository ppa:git-core/ppa

printsl "Adding brave ppa"
curl -s https://brave-browser-apt-release.s3.brave.com/brave-core.asc | sudo apt-key --keyring /etc/apt/trusted.gpg.d/brave-browser-release.gpg add -
echo "deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main" | sudo tee /etc/apt/sources.list.d/brave-browser-release.list

printsl "Adding nodesource ppa"
curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -

# Update system && Install Packages
printsl "Updating System"
sudo apt-get update && sudo apt upgrade -y

printsl "Installing apt packages"
sudo apt-get install -y \
    alacritty bridge-utils brave-browser build-essential \
    cheese cmake code deepin-icon-theme discord easytag fish \
    gdb gnome-tweaks google-chrome-stable gparted gufw \
    llvm lollypop make neofetch neovim nodejs preload \
    python3.8 python3.9 python3-pip python3-dev qemu-kvm \
    shellcheck sqlite3 sqlitebrowser symlinks tensorman thunderbird \
    tree ttf-mscorefonts-installer ubuntu-restricted-extras ufw virt-manager \
    virutalbox wget

printsl "Installing Python build deps, for pyenv."
sudo apt-get install libssl-dev zlib1g-dev \
libbz2-dev libreadline-dev libsqlite3-dev \
libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev

sudo adduser "$(whoami)" libvirtd

# Enable Firewall
printsl "Enabling firewall"
sudo ufw enable

# Installing Flatpaks
printsl "Installing flatpaks"
flatpak install flathub \
    com.axosoft.GitKraken \
    com.bitwarden.desktop \
    com.getpostman.Postman \
    com.slack.Slack \
    com.spotify.Client \
    net.cozic.joplin_desktop \
    org.kde.haruna \
    org.processing.processingide \
    us.zoom.Zoom

# Remove geary, don't like it
printsl "Apt cleanup"
sudo apt purge --auto-remove -y geary

# Basic python packages
printsl "Setting up pip and pipenv"
python3.8 -m pip install -U pip pipenv pylint black
python3.9 -m pip install -U pip pipenv pylint black

# Install "Diff So Fancy" and Yarn
printsl "Installing 'diff-so-fancy' via npm, and yarn"
sudo npm install -g diff-so-fancy yarn

# Install Rust
printsl "Installing Rust"
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

# Install Starship Prompt
printsl "Installing 'Starship' for fish"
curl -fsSL https://starship.rs/install.sh | bash

# Pyenv
printsl "Installing Pyenv."
curl https://pyenv.run | bash

# Make fish the default shell
printsl "Setting fish as default shell"
chsh -s "$(which fish)"

###############################################################################
#                                                                             #
############## Section 2 - Create symlinks for dotfiles  ######################
#                                                                             #
###############################################################################

#####  Setup  #####
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
SHARE="${XDG_DATA_HOME:-$HOME/.local/share}"
SOURCE_DIR="$HOME/Source"
NVIM_DIR="$XDG_CONFIG_HOME/nvim"
DOTFILES="$SOURCE_DIR/dotfiles"
FISH_PATH="$XDG_CONFIG_HOME/fish"
TMP="$HOME/tmp"

# create tmp folder in case something goes wrong
mkdir "$TMP"

function link {
    ln -sf $1 $2
}

# make folders
mkdir -p "$SOURCE_DIR"
mkdir -p "$SHARE/icons/"
mkdir -p "$SHARE/themes"
mkdir -p "$NVIM_DIR"
mkdir -p "$FISH_PATH"

# Download Git Repos
# If repo not in DOTFILES dir, reclone repo to that dir
if [ ! -d "$DOTFILES" ]; then
    printsl "Dotfiles repository not located at $DOTFILES, fixing that now"
    git clone https://github.com/JFitzy1321/dotfiles.git "$DOTFILES"
fi

# Creating symlinks to various file
printsl "Creating symlinks for dotfiles."

link "$DOTFILES/alacritty.yml" "$XDG_CONFIG_HOME/."
link "$DOTFILES/git" "$XDG_CONFIG_HOME"
link "$DOTFILES/bin" "$HOME"
link "$DOTFILES/nvim/init.vim" "$NVIM_DIR/."

mv "$HOME/.profile" "$HOME/.old_profile"
link "$DOTFILES/.profile" "$HOME/.profile"
[ -f "$HOME/.bashrc" ] && mv "$HOME/.bashrc" "$HOME/.old_bashrc"
[ -f "$HOME/.bash_profile" ] && mv "$HOME/.bash_profile" "$HOME/.old_bash_profile"
link "$DOTFILES/.bashrc" "$HOME/.bashrc"
link "$DOTFILES/fish/config.fish" "$FISH_PATH/."
link "$DOTFILES/fish/functions" "$FISH_PATH"
link "$DOTFILES/fish/completions" "$FISH_PATH"
link "$DOTFILES/starship.toml" "$XDG_CONFIG_HOME/."
