#!/usr/bin/env bash

###############################################################################
# Fitzypop's Linux Install script
#
# First section:    Install various packages via apt, flatpak,
#                   and install scripts
#
# Second Section:   Create symlinks for dotfiles
#
# I'm currently using Pop!_OS and apt to install packages.
# This should be compatiable with any Ubuntu Based Distro,
# but I will be assuming Pop!_OS default setup.
#
###############################################################################

# "e" will make script exit if something fails
# "x" will print out every command and its result
# set -x #e

function printsl {
    echo "" # newline
    echo "$1"
    sleep 0.5
}


# Need these to install ppas and setup scripts
printsl "Installing prerequesites before installing PPAs."
sudo apt update
sudo apt install apt-transport-https curl software-properties-common

# Adding PPAs for fish, git, brave, and node

printsl "Adding Fish PPA for lastest version of fish shell."
add-apt-repository ppa:fish-shell/release-3

printsl "Adding Git Core PPA for latest stable upstream of Git."
add-apt-repository ppa:git-core/ppa

printsl "Adding brave ppa"
curl -s https://brave-browser-apt-release.s3.brave.com/brave-core.asc | sudo apt-key --keyring /etc/apt/trusted.gpg.d/brave-browser-release.gpg add -
echo "deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main" | sudo tee /etc/apt/sources.list.d/brave-browser-release.list

printsl "Adding nodesource ppa"
curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -

# Update system && Install Packages
printsl "Updating System"
sudo apt-get update && sudo apt upgrade -y

printsl "Installing apt packages"
sudo apt-get install -y \
    alacritty brave-browser build-essential cheese code deepin-icon-theme \
    discord easytag fish gdb gnome-tweaks google-chrome-stable gparted gufw \
    htop llvm locate lollypop make neofetch neovim nodejs python3-pip \
    python3-dev python3-tk python3-venv qemu-kvm shellcheck sqlite3 sqlitebrowser \
    symlinks tensorman thunderbird tree ttf-mscorefonts-installer \
    ubuntu-restricted-extras ufw virt-manager wget \
    pcscd # for yubikey app

sudo adduser "$(whoami)" libvirtd

# Enable Firewall
printsl "Enabling firewall"
sudo ufw enable

# Installing Flatpaks
printsl "Installing flatpaks"
flatpak install flathub \
    com.slack.Slack \
    com.axosoft.GitKraken \
    com.spotify.Client \
    net.cozic.joplin_desktop \
    org.kde.haruna \
    us.zoom.Zoom

# Remove geary, don't like it
printsl "Apt cleanup"
sudo apt purge --auto-remove -y geary

# Python setup
printsl "Installing Python build deps, for pyenv."
sudo apt-get install -y \
    libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev \
    libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev \
    scrot python3-tk pyenv

printsl "Setting up pip and pipenv"
python3.8 -m pip install -U pip flake8 black pytest pytest-mock coverage pytest-cov pytest-sugar
python3.9 -m pip install -U pip pipx pyautogui jupyterlab pandas \
    flake8 black pytest pytest-mock coverage pytext-cov pytest-sugar

# Pyenv
printsl "Installing Pyenv."
curl https://pyenv.run | bash

printsl "Install Poetry. Installation script will be saved in $HOME/.cache/ directory."
curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py >> $HOME/.cache/install-poetry.py
python3 $HOME/.cache/install-poetry.py

# Install Rust
printsl "Installing Rust"
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

# Install delta via cargo
printsl "Installing delta"
$HOME/.cargo/bin/cargo install git-delta

# Install Starship Prompt
printsl "Installing 'Starship' for fish"
curl -fsSL https://starship.rs/install.sh | bash

# Make fish the default shell
printsl "Setting fish as default shell"
chsh -s "$(which fish)"

###############################################################################
#                                                                             #
############## Section 2 - Create symlinks for dotfiles  ######################
#                                                                             #
###############################################################################

#####  Setup  #####
CONFIG="$HOME/.config"
SHARE="${XDG_DATA_HOME:-$HOME/.local/share}"
SOURCE_DIR="$HOME/Source"
DOTFILES_DIR="$SOURCE_DIR/dotfiles"
FISH_DIR="$CONFIG/fish"
NVIM_DIR="$CONFIG/nvim"
TMP="/tmp"

# create tmp folder in case something goes wrong
mkdir "$TMP"

function link {
    ln -sf $1 $2
}

# make folders
mkdir -p "$SOURCE_DIR"
mkdir -p "$SHARE/icons/"
mkdir -p "$SHARE/themes"
mkdir -p "$FISH_DIR"
mkdir -p "$NVIM_DIR"

# Download Git Repos
# If repo not in DOTFILES dir, reclone repo to that dir
if [ ! -d "$DOTFILES_DIR" ]; then
    printsl "Dotfiles repository not located at $DOTFILES_DIR, fixing that now"
    git clone https://github.com/JFitzy1321/dotfiles.git "$DOTFILES_DIR"
fi

# Creating symlinks to various file
printsl "Creating symlinks for dotfiles."
link "$DOTFILES_DIR/git" "$CONFIG/."
link "$DOTFILES_DIR/bin" "$HOME/."
link "$DOTFILES_DIR/pyproject" "$CONFIG/."
link "$DOTFILES_DIR/python" "$CONFIG/."

mv "$HOME/.profile" "$TMP/.profile"
link "$DOTFILES_DIR/.profile" "$HOME/.profile"

[ -f "$HOME/.bashrc" ] && mv "$HOME/.bashrc" "$TMP/.bashrc"
[ -f "$HOME/.bash_profile" ] && mv "$HOME/.bash_profile" "$TMP/.bash_profile"

link "$DOTFILES_DIR/alacritty.yml" "$CONFIG/."
link "$DOTFILES_DIR/.bashrc" "$HOME/.bashrc"
link "$DOTFILES_DIR/fish/config.fish" "$FISH_DIR/."
link "$DOTFILES_DIR/fish/abbrevs.fish" "$FISH_DIR/."
link "$DOTFILES_DIR/fish/functions" "$FISH_DIR"
link "$DOTFILES_DIR/fish/completions" "$FISH_DIR"
link "$DOTFILES_DIR/starship.toml" "$CONFIG/."
link "$DOTFILES_DIR/nvim/init.vim" "$NVIM_DIR/."

# Update locate db
OS_NAME=$(uname)
if [ "$UNAME" == "Linux" ]; then
    sudo updatedb
elif [ "$UNAME" == "Darwin"]; then
    sudo /usr/libexec/locate.updatedb
fi
