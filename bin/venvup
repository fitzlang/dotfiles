#!/usr/bin/env python3
import subprocess
from pathlib import Path
from typing import Optional

import typer  # pip3 install -U typer[all]

HOME = str(Path.home())
VENV_MAKE_CMD = "python -m venv {0}"


def _run_cmd(cmd: str) -> None:
    subprocess.run(cmd, shell=True)


def _py_path(venv_path: Path) -> Path:
    return venv_path / "bin" / "python"


def make_venv(path: Path) -> None:
    venv_cmd = VENV_MAKE_CMD.format(path)
    _run_cmd(venv_cmd)


def refresh_venv(path: Path) -> None:
    try:
        print("reconstructing .venv ...")
        _run_cmd(f"rm -rf {path}")
        make_venv(path)
    except:
        _run_cmd(f"mkdir -p {path}")
        raise


def get_or_make_py_path(venv_path: Path) -> Path:
    py_path = _py_path(venv_path)
    if not py_path.exists():
        make_venv(py_path)

    return py_path


def update_venv(venv_path: Path) -> None:
    py_path = get_or_make_py_path(venv_path)
    _run_cmd(f"{py_path} -m pip install -U pip")
    _run_cmd(
        f"{py_path} -m pip install -U ruff black isort pytest pytest-cov pytest-mock"
    )


def trim_path(path: Path) -> Path:
    parts = str(path).split(".venv")
    if len(parts) >= 2:
        return Path(parts[0]) / ".venv"

    return path


def find_path(current_path: str, search_text: str) -> Optional[Path]:
    """Brute force recursive directory search"""
    # Edge case, if script cwd is in .venv
    if search_text in current_path:
        return find_path(str(Path(current_path).parent), search_text)

    cur = Path(current_path)
    while True:
        # bail iterating if we are at $HOME or root
        str_p = str(cur)
        if str_p == HOME or str_p == "/":
            return None

        # Get everything in the current directory
        for p in cur.glob("*"):
            if search_text in str(p):
                return trim_path(p)

        # Go up to parent directory
        cur = cur.parent


def main(refresh: bool = False, create: bool = False) -> int:
    try:
        if create:
            p = Path.cwd() / ".venv"
            make_venv(p)
            update_venv(p)
            return 0

        venv_path = find_path(str(Path.cwd()), ".venv")
        if not venv_path:
            print(".venv folder not found")
            return 1

        print("found .venv folder at:", venv_path)
        if refresh:
            refresh_venv(venv_path)

        update_venv(venv_path)
        return 0

    except KeyboardInterrupt:
        print("Keyboard Interrupt sent! Stopping process.")
        return 2


if __name__ == "__main__":
    raise SystemExit(typer.run(main))
